---
globs: *.py
---

# Python Coding Conventions

## Type Annotations
- **Always use explicit typing in function signatures** - this is a project requirement
- Use explicit typing for variable declarations when the type is unclear
- Prefer `typing.override` decorator for method overrides
- Use `typing.Any` for generic return types when specific typing is not feasible
- Use `typing.Literal` for string literal types (e.g., device types)

## Import Organization
- Follow the import order defined in [pyproject.toml](mdc:pyproject.toml) ruff configuration
- Use `from typing import` for type imports
- Group imports: standard library, third-party, first-party (`combo_dl`)
- Use `from combo_dl` imports for internal modules

## Docstring Conventions
- Use Google-style docstrings as configured in [pyproject.toml](mdc:pyproject.toml)
- Include comprehensive docstrings for all public classes and methods
- Document Args, Returns, and Raises sections
- Use `...` for abstract method implementations

## Error Handling
- Use `pyright: ignore[reportRedeclaration]` comments for legitimate redeclarations
- Use `pyright: ignore[reportAttributeAccessIssue]` for dynamic attribute access
- Prefer explicit error handling over broad exception catching

## Code Style
- Follow the ruff configuration in [pyproject.toml](mdc:pyproject.toml)
- Line length: 99 characters
- Use double quotes for strings
- Use space indentation
- Prefer f-strings for string formatting